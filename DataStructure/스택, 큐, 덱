스택, 큐, 덱은 자료구조의 선형 구조로 선형 구조(Linear Structure)란 데이터를 저장하기 위한 기본적인 형태로 데이터가 일렬로 나열되어 있으면서 데이터 간에 순서가 있고 논리적으로 이어져 있는 구조를 의미한다.

- 스택(Stack)
    - 후입선출(LIFO, Last In First Out)로 가장 마지막으로 들어온 데이터가 가장 먼저 나간다.
    - top : 가장 최근에 저장된 데이터로 삽입과 삭제가 일어나는 위치이다.
    - push : top에 새로운 데이터를 추가한다. 스택이 꽉 차있을 경우 stack overflow가 발생한다.
    - pop : top에 데이터가 삭제된다. 스택이 비어있을 경우 stack underflow가 발생한다.
    - peek : 스택의 맨 위에 있는 데이터를 조회하는 연산이다.
    - 시간 복잡도는 삽입/삭제 :  O(1), 탐색 O(n)이다.
    - 장점 : top을 통해 접근하기 때문에 데이터 접근/삽입/삭제가 빠르다.
    - 단점 : top 위치 이외의 데이터에 접근할 수 없기 때문에 탐색하려면 모든 데이터를 꺼내면서 진행해야한다.
    - 활용 : 재귀 알고리즘, 깊이 우선 탐색(DFS, Depth First Search) 알고리즘, 역추적 작업, 뒤로가기 등
- 큐(Queue)
    - 선입선출(FIFO, First In First Out)로 가장 먼저 들어온 데이터가 가장 먼저 나간다.
    - rear : 큐의 맨 뒤에 위치한 데이터를 가리킨다.
    - front : 큐의 맨 앞에 위치한 데이터를 가리킨다.
    - Enqueue : rear위치에 데이터를 추가한다.
    - Dequeue : front위치의 데이터를 삭제한다.
    - 선형 큐(Linear Queue)
        - 선형 배열을 사용하여 구현된 큐
        - 삽입을 위해서는 계속 요소를 이동시켜야한다.
        - front, rear는 증가만 하는 방식, 실제로는 front 앞쪽에 공간이 있더라도 삽입할 수 없는 경우가 발생할 수 있다.
    - 원형 큐(Circular Queue)
        - 선형 큐의 단점을 보완
        - front가 맨 첫번째 요소 바로 앞을 가리킴
        - rear 마지막 요소를 가리킴
        - 큐 비어있는 상태 : front == rear
        - 큐가 꽉 차있는 상태 : front == (rear + 1) % MAX_QUEUE_SIZE
        - 공백 상태와 포화 상태를 구분하기 위해 하나의 공간을 비워둠
    - 시간 복잡도는 삽입/삭제 :  O(1), 탐색 O(n)이다.
    - 장점 : 데이터 접근/삽입/삭제가 빠르다.
    - 단점 : 큐 역시 스택과 마찬가지로 중간에 위치한 데이터에 대한 접근이 불가능하다.
    - 활용 : 데이터를 입력된 순서대로 처리해야 할 경우, 너비 우선 탐색(BFS, Breadth First Search) 알고리즘, 프로세스 관리, 대기 순서 관리
- 덱(Deque)
    - Deque는 Double - Ended Queue 의 줄임말이다.
    - 양쪽 front와 rear에서 삽입/삭제가 가능하다.
    - 스택과 큐의 기능을 모두 가지고 있는 자료구조로, 양쪽 끝에서 삽입/삭제가 가능하다. 따라서 선입선출, 후입선출 개념을 모두 가지고 있다.
    - 시간 복잡도는 삽입/삭제 :  O(1), 탐색 O(n)이다.
    - 장점 : 데이터의 삽입/삭제가 빠르고 앞, 뒤에서 삽입 삭제가 모두 가능하다.
    - 단점 : 중간에서의 삽입/삭제가 어렵고 스택, 큐에 비해 구현이 어렵다.
    - 활용 : 최대값/최소값 검색,
