프로젝트(project) : 어플리케이션을 짤 때 관련한 모든 내용을 담는 큰 틀

모듈(module) : 하나의 프로젝트는 여러개의 모듈로 이루어 질 수 있다.
이 모듈은 ‘직접’만들 수 있고 필요한 기능을 이미 구현해둔 ‘라이브러리 모듈’을 가져와 붙일 수도 있음
모듈안에는 다수의 폴더와 파일이 들어 갈 수 있다.
이 안에는 코틀린 파일 뿐만 아니라 모듈과 관련된 설정 및 리소스 파일 등도 포함 될 수 있다.
프로젝트, 모듈, 폴더 및 파일은 실제 파일 시스템에 기반한 물리적인 구조를 담당

---

논리적 구조로는 패키지가 있다.
패키지(package)는 개발시에 소스 코드의 ‘소속’을 지정하기 위한 논리적 단위이다.
일반적인 패키지의 이름 : 도메인을 거꾸로 하고 그 뒤에 프로젝트 명을 붙이고 그 안에 기능별로 세분화 한다.

ex. com.sonchan.project
     com.sonchan.project.ui
     com.sonchan.project.base

코드 파일에 패키지를 넣는 방법은 파일 위에 package를 적고 패키지 이름을 적는다.
패키지 이름을 적지 않으면 자동으로 default 패키지로 묶이게 된다.
파일 상단에 패키지만 명시해주면 컴파일러가 알아서 처리한다.
같은 패키지 내에서는 변수, 함수, 클래스를 공유할 수 있다.
패키지가 다르면 import 해줘야 한다.
코드 파일 위에서 패키지 선언 바로 아래에 import를 적고 사용할 외부 패키지 이름을 써주면 된다.
패키지 내에 같은 이름의 클래스가 있다면 앞에 패키지 이름을 적어 줘야 한다.
코틀린은 클래스명과 파일명이 일치하지 않아도 된다.
하나의 파일에 여러개의 클래스를 넣어도 알아서 컴파일이 가능하다.
→ 파일이나 폴더를 기준으로 구분하지 않고 파일내에 있는 패키지 키워드를 기준으로 구분하기 때문
