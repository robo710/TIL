- MVVM 패턴에서의 ViewModel
    - View와 Model 사이의 매개체 역할을 하고 View에 보여지게 되는 데이터를 제공하는 역할
- AAC(Android Architecture Components)에서의 ViewModel
    - 앱의 Lifecycle을 고려하여 UI 관련 데이터를 저장하고 관리하는 역할
- ViewModel 이란?
    - Activity와 fragment와 같은 UI 컨트롤러의 로직에서 데이터를 다루는 로직을 분리하기 위하여 등장한 Android Jetpack 라이브러리이다.
- UI 컨트롤러의 로직과 데이터 로직을 분리해야 하는 이유
    1. UI 컨트롤러의 목적
        - 자세히
            
            UI 데이터를 표시하거나, 사용자 작업에 반응하거나, 권한 요청과 같은 운영체제 커뮤니케이션을 처리하는 것이 UI컨트롤러의 목적이다.
            따라서, UI 컨트롤러에서 데이터를 다루는 로직을 책임지게 되면 많은 유지보수가 필요한 비동기 호출과 같은 작업들을 해야 하기 때문에 UI 컨트롤러에 과도한 책임이 생기게 된다.
            
    2. 데이터 손실 방지
        - 자세히
            
            UI 컨트롤러에서는 생명주기에 따라 앱이 활동 중에 제거될 때마다 데이터를 저장시키고, 다시 생성될 때마다 데이터들을 다시 불러와야 한다.
            
- 데이터를 복원하기 위해 `onSaveInstanceState()` 메서드를 사용하는 방법은 작은 용량의 데이터에만 적합하고 데이터가 커지게 되면 적합하지 않다.
- ViewModel의 생명주기
    - Activity의 생명주기와 상관없이 살아있다면 데이터가 쭉 유지되면 데이터의 손실을 방지할 수 있을 것이다.
    - ViewModel은 Activity의 생명주기 보다 긴 수명을 가지는 생명주기를 갖게 된다.
    - ViewModel의 Scope(생명주기의 범위)는 ViewModel을 가져올 때 ViewModelProvider에 의해 결정 된다.

- ViewModel의 프로세스
    - ViewModel을 구현하기 위해서는 ViewModelProvider의 도움을 받아야 한다.
