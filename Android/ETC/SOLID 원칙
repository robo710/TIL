SOLID 원칙이란?

객체지향 설계에서 유지보수성과 확장성을 높이기 위한 5가지 원칙이다.

## 단일 책임의 원칙(SRP, Single Responsibility Principle)

클래스는 단 하나의 책임을 가져야 한다.

해당 클래스가 제공하는 모든 서비스는 단 하나의 책임만 수행하는데 집중되어야 한다. → 책임을 완전히 캡슐화해야 한다.

즉 클래스가 변경되어야 하는 이유는 오직 하나의 이유만을 가지고 있어야 한다.

### 잘못된 예시

```kotlin
class UserManager {
    fun saveUser(user: User) {
        // 데이터베이스에 저장
    }

    fun showUserProfile(context: Context, user: User) {
        // 사용자 프로필 화면을 띄움
    }
}
```

`UserManager`가 사용자 데이터 저장과 UI관련 기능을 모두 담당한다.

### 올바른 예시

```kotlin
class UserRepository {
    fun saveUser(user: User) {
        // 데이터베이스에 저장
    }
}

class UserManager {
    fun showUserProfile(context: Context, user: User) {
        // 사용자 프로필 화면을 띄움
    }
}
```

사용자 데이터를 관리하는 `UserRepository` 와 UI 관련 기능을 수행하는 `UserManager`를 분리한다.

## 개방 폐쇄의 원칙(OCP, Open Close Principle)

객체는 확장에 대해서는 개방적이고 수정에 대해서는 폐쇄적이어야 한다.

요구사항의 변경이나 추가 사항이 발생하더라도, 기존 구성요소는 수정이 일어나지 말아야 하며 쉽게 확장이 가능하여 재사용할 수 있어야 한다.

### 잘못된 예시

```kotlin
class PaymentProcessor {
    fun processPayment(paymentType: String) {
        when (paymentType) {
            "credit_card" -> println("신용카드 결제")
            "paypal" -> println("PayPal 결제")
        }
    }
}
```

결제 방식을 추가할 경우 기존의 코드를 수정해야 한다.

### 올바른 예시

```kotlin
interface PaymentStrategy {
    fun pay()
}

class CreditCardPayment : PaymentStrategy {
    override fun pay() {
        println("신용카드 결제")
    }
}

class PayPalPayment : PaymentStrategy {
    override fun pay() {
        println("PayPal 결제")
    }
}

class PaymentProcessor {
    fun processPayment(strategy: PaymentStrategy) {
        strategy.pay()
    }
}
```

새로운 결제 방식을 추가할 때 기존의 코드를 수정하지 않고 확장할 수 있도록 `PaymentStrategy` 인터페이스를 활용한다.

## 리스코프 치환의 원칙(LSP, LisKov Substitution Princlple)

자식 클래스는 부모 클래스를 대체할 수 있어야 한다.

상속받은 클래스가 부모 클래스의 기능을 유지하면서 추가적인 기능만 확장하여야 한다.

즉 부모 클래스를 상속받은 자식 클래스는 모든 기능이 정상적으로 작동해야 하며, 자식 클래스의 상세 내부를 부모 클래스는 알 필요가 없다.

### 잘못된 예시

```kotlin
open class Rectangle {
    open var width: Int = 0
    open var height: Int = 0

    open fun setDimensions(width: Int, height: Int) {
        this.width = width
        this.height = height
    }
}

class Square : Rectangle() {
    override var width: Int
        get() = super.width
        set(value) {
            super.width = value
            super.height = value  // 정사각형은 가로와 세로가 같아야 하므로, width만 설정하면 height도 함께 설정됨
        }

    override var height: Int
        get() = super.height
        set(value) {
            super.width = value
            super.height = value  // 마찬가지로, height를 설정하면 width도 설정됨
        }
}

// 사각형을 사용하는 함수
fun printArea(rectangle: Rectangle) {
    rectangle.setDimensions(5, 10)
    println("Area: ${rectangle.width * rectangle.height}")
}

fun main() {
    val rectangle = Rectangle()
    val square = Square()

    printArea(rectangle)  // 직사각형은 width와 height가 독립적이어서 제대로 동작함
    printArea(square)  // 정사각형은 width와 height가 항상 같아서 이상하게 동작함
}
```

`Square`는 `Rectangle`을 상속받았지만 `width`와 `height`의 독립적인 설정이 불가능하여 `setDimensions` 메서드를 호출할 때 예상과 다른 동작을 하게 된다. `Square`는 `Rectangle`을 대체할 수 없습니다.

### 올바른 예시

```kotlin
// 부모 클래스는 도형을 위한 추상 클래스
open class Shape {
    abstract fun area(): Int
}

// 직사각형 클래스
class Rectangle(val width: Int, val height: Int) : Shape() {
    override fun area(): Int {
        return width * height
    }
}

// 정사각형 클래스
class Square(val side: Int) : Shape() {
    override fun area(): Int {
        return side * side
    }
}

fun printArea(shape: Shape) {
    println("Area: ${shape.area()}")
}

fun main() {
    val rectangle = Rectangle(5, 10)
    val square = Square(5)

    printArea(rectangle)  // 직사각형의 면적
    printArea(square)     // 정사각형의 면적
}
```

`Shape`라는 추상 클래스를 만들어 `Rectangle`과 `Square`가 각각 자신의 방식으로 면적을 계산하도록 하여, 두 클래스가 동일한 인터페이스를 가지고 동작하도록 한다. 이로써 `Rectangle`과 `Square`는 모두 대체 가능하다.

## 인터페이스 분리의 원칙(ISP, Interface Segregation Principle)

사용하지 않는 메서드에 의존해서는 안 된다.

자신이 사용하지 않는 인터페이스는 구현하지 말아야 한다.

하나의 큰 인터페이스를 상속받기보다는 여러 개의 작은 구체적인 인터페이스를 만들어 꼭 필요한 인터페이스만 상속받아야 한다.

### 잘못된 예시

```kotlin
interface MediaPlayer {
    fun playAudio()
    fun playVideo()
}

class MP3Player : MediaPlayer {
    override fun playAudio() {
        println("음악 재생")
    }

    override fun playVideo() {
        throw UnsupportedOperationException("MP3는 비디오 재생이 불가")
    }
}

class Mp4Player : MediaPlayer {
    override fun playAudio() {
        println("음악 재생")
    }

    override fun playVideo() {
        println("비디오 재생")
    }
}
```

MP3Player도 사용하지 않는 `playVideo` 를 구현해하는 상황이다.

### 올바른 예시

```kotlin
interface AudioPlayer {
    fun playAudio()
}

interface VideoPlayer {
    fun playVideo()
}

class MP3Player : AudioPlayer {
    override fun playAudio() {
        println("음악 재생")
    }
}

class MP4Player : AudioPlayer, VideoPlayer {
    override fun playAudio() {
        println("음악 재생")
    }

    override fun playVideo() {
        println("비디오 재생")
    }
}
```

`AudioPlayer` 와 `VideoPlayer` 를 각각 필요한 기능만 구현하도록 인터페이스를 분리한다.

## 의존성 역전의 원칙(DIP, Dependency Inversion Principle)

고수준 모듈은 저수준 모듈에 의존하지 말고, 둘 다 추상화에 의존해야 한다.

객체는 추상클래스, 인터페이스에 의존해야 한다. 즉 변화가 없는 것에 의존해야 한다.

### 잘못된 예시

```kotlin
class LightBulb {
    fun turnOn() {
        println("전구가 켜졌습니다.")
    }

    fun turnOff() {
        println("전구가 꺼졌습니다.")
    }
}

class Switch {
    private val bulb = LightBulb()

    fun operate() {
        bulb.turnOn()  // 직접적으로 전구에 의존
    }
}
```

위의 예시에서는 `Switch` 클래스가 `LightBulb` 클래스에 직접적으로 의존하고 있으므로 인해 `LightBulb`를 변경해야 할 때, `Switch` 클래스도 함께 수정해야 한다. `LightBulb`와 `Switch`는 강하게 결합되어 있어 유연성이 떨어진다.

### 올바른 예시

```kotlin
interface Switchable {
    fun turnOn()
    fun turnOff()
}

class LightBulb : Switchable {
    override fun turnOn() {
        println("전구가 켜졌습니다.")
    }

    override fun turnOff() {
        println("전구가 꺼졌습니다.")
    }
}

class Switch(private val device: Switchable) {
    fun operate() {
        device.turnOn()
    }
}
```

 `Switch`는 이제 `LightBulb`와 같은 구체적인 클래스에 의존하지 않고, `Switchable`이라는 추상화된 인터페이스에 의존하고 있으므로  `Switch`는 `LightBulb` 외에도 다른 종류의 `Switchable` 객체와 함께 사용할 수 있게 된다. 예를 들어, `Fan` 같은 다른 전자기기에도 `Switch` 클래스를 재사용할 수 있다.
