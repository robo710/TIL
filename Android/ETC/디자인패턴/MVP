MVP 패턴이란 Model, View, Presenter 세가지 구성 요소로 이루어진 이루어진 디자인 패턴이다.

MVC(Model, View, Controller) 패턴에서 View와 Model 사이의 의존성 문제를 보완하여 만들어진 디자인 패턴이다.

구성요소

1. Model
    - **데이터와 비즈니스 로직**을 처리하는 역할을 담당한다.
    - 데이터의 처리 및 저장, 외부 네트워크 통신, 데이터베이스 접근과 같은 기능을 수행한다.
2. View
    - **UI와 사용자 상호작용**을 담당한다.
    - 사용자 입력을 Presenter에 전달하고, Presenter로부터 받은 데이터를 기반으로 화면을 갱신한다.
3. Presenter
    - View와 Model 간의 **중개자 역할**을 한다.
    - View에서 사용자 이벤트를 전달받아 Model에 데이터를 요청하고, Model에서 받은 데이터를 View에 전달한다.

MVP의 특징

- Presenter와 View는 서로 1:1 관계이다.
- Presenter와 Model은 독립적이므로 재사용이 가능하다.

MVP의 동작 과정

1. 사용자의 입력이 View를 통해 들어온다.
2. View는 사용자 입력을 Presenter에 전달한다.
3. Presenter는 Model에 데이터를 요청하거나 명령을 수행한다.
4. Model은 요청받은 작업을 처리하고, 결과를 Presenter에 반환한다.
5. Presenter는 데이터를 가공하여 View에 전달한다.
6. View는 Presenter로부터 받은 데이터를 사용해 UI를 갱신한다.

MVP의 장점

- View, Model, Presenter가 각각의 역할이 명확하여 코드 가독성과 유지보수가 용이하다.
- Presenter 를 통해서 데이터를 전달받기 때문에 Model 과 View 간의 결합도를 낮추면 새로운 기능 추가 및 변경을 해야 할 때 관련된 해당 부분만 수정하면 되기 때문에 확장성이 좋다.
- 비즈니스 로직이 Presenter와 Model에 분리되어 있어 독립적으로 테스트하기에 용이하다.
- View를 변경해도 Presenter와 Model에 영향을 미치지 않으므로 UI 변경이 용이하다.

MVP의 단점

- Presenter에 많은 기능을 담당하게 했을 경우 Presenter가 비대해지는 문제가 발생할 수 있다.
- View는 Presenter에 의존적이기 때문에 View와 Presenter 간의 의존성이 높아질 수 있다.
