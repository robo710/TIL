MVVM패턴이란 Model, View, ViewModel 세가지 구성 요소를 통해 관심사를 분리하여 앱 구조를 체계적으로 설계하기 위해 사용되는 디자인 패턴이다.

Model - 앱 내에서 필요한 데이터, 상태, 비즈니스 로직을 저장하고 처리하는 역할을 한다. ViewModel이 필요로 하는 데이터를 제공하고, 데이터를 저장하고 갱신하는 역할을 한다.

View - 사용자가 직접보는 UI를 담당한다. 사용자와의 상호작용을 처리하는 역할을 한다.

ViewModel - View와 Model사이에 위치하여 중간 관리 역할을 한다. Model에서 데이터를 가져와서 View에 필요한 형태로 변환하고 데이터를 제공한다. View에서 요청하는 이벤트에 맞는 비즈니스 로직을 처리한다.

MVVM의 동작 과정

1. 사용자의 입력이 View에 들어온다.
2. View에 해당하는 이벤트를 ViewModel에 전달한다.
3. ViewModel은 Model에게 데이터를 요청한다.
4. Model은 ViewModel에게 요청받은 데이터를 응답한다.
5. ViewModel은 반환된 데이터를 가공하여 저장한다.
6. View는 ViewModel을 관찰하여 갱신한다.

장점 : View와 ViewModel사이에 의존성이 없어 View와 무관하게 ViewModel을 재사용 할 수 있다. 코드가 역할에 따라 분리되어 있어 유지보수에 용이하다. Model과 ViewModel을 독립적으로 테스트할 수 있어 테스트에 용이하다. 

단점 : ViewModel의 설계가 어렵다.
