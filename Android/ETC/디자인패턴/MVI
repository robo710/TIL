MVI패턴이란 Model, View, Intent 세가지 구성 요소로 이루어진 디자인 패턴으로 단방향 데이터 흐름이 특징이다.

단방향 데이터 흐름은 데이터가 모델 → 뷰 → 인텐트로 단방향으로 흐른다는 것을 의미한다..

Model : UI에 반영될 상태를 의미한다. MVP와 MVVI에서 정의하는 데이터와는 다르다.

View : UI 그 자체를 의미한다.

Intent : 사용자 액션 및 시스템 이벤트에 따른 결과를 의미한다.

MVI의 동작과정

1. View에서 사용자 입력이 들어온다.
2. 이벤트가 Intent로 변환된다.
3. Intent는 Model로 전달되어 데이터 또는 비즈니스 로직으로 처리한다.
4. Model은 Intent를 처리한 결과로 새로운 State를 생성한다.
5. 새로운 State가 View에 전달되고 UI를 업데이트한다.

코드 작성에 필요한 것

UiState : 현재 상태를 관리한다.

UiIntent : 사용자의 행동을 관리한다.

UiSideEffect : 화면 이동, 로깅, 에러메시지 등과 같은 단발성 이벤트를 처리하는데 사용된다.

BaseViewModel : UiState, UiIntent, UiSideEffect를 상속한 타입만 오도록 제네릭 타입 파라미터로 선언하고 상태는 초기 값이 필요하기 때문에 초기값도 함께 받아주고, 뷰모델이기 때문에 뷰모델을 상속 받아야한다.

장점 : 단일 객체로 관리되어 상태 관리에 용이하다. 데이터가 단방향으로 흐르므로 데이터의 흐름을 파악하기 쉽다. 디버깅과 테스트가 쉽다.

단점 : Intent, State, Side Effect 등 모든 상태에 대한 객체를 생성해야하므로 메모리 관리가 힘들다. 작은 변경에도 Intent를 거쳐야한다.
