안드로이드 앱 개발을 하며 이미지를 다루는 경우 안드로이드 앱은 이미지 파일을 Bitmap형식으로 다루는데, 이 Bitmap을 이미지 파일로 저장하고 싶을 경우 Bitmap.compress() 함수를 사용한다.

### compress() 함수

```kotlin
 public boolean compress(@NonNull CompressFormat format, int quality, @NonNull OutputStream stream) {
        throw new RuntimeException("Stub!");
    }
```

### 각 매개변수 역할

- compressFormat : 이미지를 어떤 형태로 저장할지 선택
    - JPEG
    - PNG
    - WEBP
    - WEBP_LOSSY
    - WEBP_LOSSLESS
- quality : 이미지의 압축 품질 선택(0 ~ 100)
    - 100은 최대 품질(압축이 거의 없음)
    0은 최저 품질(압축률이 높다)
    - (quality)%로 생각하면 편하다.
- outputStream : 압축된 데이터를 저장할 스트림
    - 압축 저장 후 꼭 `outputStream.close()` 또는 `use` 블록으로 자동 닫기
        - 안 닫을 시 데이터가 완전히 기록되지 않거나, 메모리 누수 발생 가능

## 각 형태 별 특징

### JPEG

- 손실 압축
- 용량이 작음
- 투명도 지원 X

### PNG

- 무손실 압축
- 용량이 큼
- 고화질 유지
- 투명도 지원 O

### WEBP

- JPEG보다 더 효율적인 압축 형식
- WEBP_LOSSY
    - 손실 압축
    - 투명도 미지원
- WEBP_LOSSLESS
    - 무손실 압축
    - 투명도 지원

## compress()의 추가 특징

`compress()`는 `Boolean`을 반환하는데, 성공 여부를 나타낸다.

```kotlin
// 성공 시 true, 실패 시 false
val success = bitmap.compress(Bitmap.CompressFormat.JPEG, 100, outputStream)
```

이를 활용하여 성공 여부 체크가 필요한 경우 유용하게 사용할 수 있다.

### 간단한 사용 예시

```kotlin
context.contentResolver.openOutputStream(uri)?.use { outputStream ->
    val success = bitmap.compress(Bitmap.CompressFormat.PNG, 100, outputStream)
    if (!success) {
        Log.e("ImageSave", "이미지 저장 실패")
    }
}
```

위 예시처럼 `use` 블록을 활용하면 `OutputStream`을 자동으로 닫아줄 수 있어 자원 누수를 방지할 수 있다.

또한 `compress()`의 반환값을 통해 저장 성공 여부를 쉽게 확인할 수 있어, 실패 시 적절한 처리를 할 수 있다.
